type Time = int;
type Submission = text;
type PlayTokenAmount = nat;
type JudgeReputation = int;
type JudgeIntrinsicInfo = 
 record {
   description: text;
   friendly_name: text;
 };
type Judge = principal;
type Decision = opt principal;
type ContestStatus = 
 record {
   ballots: vec record {
                  Judge;
                  Ballot;
                };
   contest: Contest;
   is_resolved: bool;
   submissions: vec record {
                      principal;
                      Submission;
                    };
 };
type ContestResults = 
 record {
   ballots: vec record {
                  Judge;
                  Ballot;
                };
   contest: Contest;
   submissions: vec record {
                      principal;
                      Submission;
                    };
   winners: vec principal;
 };
type ContestId = text;
type Contest = 
 record {
   contest_id: ContestId;
   decision_time: Time;
   default_receiver: principal;
   description: text;
   judges: vec Judge;
   stake: PlayTokenAmount;
 };
type Ballot = 
 record {
   decision: Decision;
   voter: Judge;
 };
service : {
  check_and_maybe_resolve: (ContestId) -> (opt ContestResults);
  downvote_judge_reputation: (Judge) -> (bool, text);
  faucet: () -> (bool, text);
  list_balances: () -> (vec record {
                              principal;
                              PlayTokenAmount;
                            }) query;
  list_judges: () ->
   (vec record {
          Judge;
          record {
            JudgeIntrinsicInfo;
            JudgeReputation;
          };
        }) query;
  lookup: (ContestId) -> (opt ContestStatus) query;
  make_contest: (Contest) -> (bool, text);
  register_as_judge: (JudgeIntrinsicInfo) -> ();
  send: (principal, PlayTokenAmount) -> (bool, text);
  submit: (ContestId, text) -> (bool, text);
  upvote_judge_reputation: (Judge) -> (bool, text);
  vote: (ContestId, Decision) -> ();
}
